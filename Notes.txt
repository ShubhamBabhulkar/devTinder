Create a folder with project name.
add sr folder and app.js file in side src folder.
install express npm package.
Create a middleware fo;der in side the src and create auth.js file in side the the folder.
where you can add the authorization code.
Create a free cluster on mongoDB.com
install mongoose npm package.
create a config folder in side the src folder and create a database.js file.
where you can add connection code with database.

app.js

const express = require("express");
const connectDB = require("./config/database");
const {adminAuth, userAuth} = require("./middleware/auth");
const app = express();

connectDB()
.then(() => {
    console.log("Database connected Sucessfully!!!");
    app.listen(3000, () => {
        console.log('Server listen on port 3000');
    })
})
.catch((err) => {
    console.log("Database can not connected!!!");
})
______________________________________________________________________________

databas.js

const mongoose = require("mongoose");

const connectDB = async() => {
    await mongoose.connect('mongodb+srv://shubhamb:h6JJI94aomXLzlQY@namastenode.ciolm.mongodb.net/devTinder');
    
}

module.exports = connectDB;
______________________________________________________________________________

auth.js (Middleware)

const adminAuth = (req, res, next) => {
    console.log('in side admin auth check');
    const token = "xyz";
    const Autorization = token === 'xyz';
    if(!Autorization) {
        res.status(401).send('Unatorizes request!!');
    } else {
        next();
    }
}

const userAuth = (req, res, next) => {
    console.log('in side User auth check');
    const token = "abcd";
    const Autorization = token === 'abc';
    if(!Autorization) {
        res.status(401).send('Unatorizes request!!');
    } else {
        next();
    }
}


module.exports = {
    adminAuth,
    userAuth
};


______________________________________________________________________________

- Create a User Schema
 create a folder models in side the src folder, and add file like user.js

 const mongoose = require('mongoose');
// const { Schema } = mongoose;

const userSchema = new mongoose.Schema({
  firstName: String, // String is shorthand for {type: String}
  lastName: String,
  emailId: String,
  password: String,
  age:Number,
  gender: String
});

module.exports = mongoose.model('User', userSchema);

App.js

const User = require("./models/user");

app.post("/signup", async (req, res) => {
    const user = new User({
            firstName: "Sushil",
            lastName: "Babhulkar",
            emailId: "sushilbabhulkar@gmail.com",
            password: "sushil@123",
            age:34,
            gender: "Male"
        });
   
    try{
       await user.save();
       res.send("User Added Successfully!!");
   } catch(err) {
        res.status(400).send('User not added !!!'+ err.message);
   }
})

____________________________________________________________________________________________

read the request body in the app.js

app.use(express.json());

// Add User data
app.post("/signup", async (req, res) => {
    console.log('req', req.body);
    const user = new User(req.body);
   
    try{
       await user.save();
       res.send("User Added Successfully!!");
   } catch(err) {
        res.status(400).send('User not added !!!'+ err.message);
   }
})


// get data by emailId;
app.get('/user', async (req, res) => {
    const userEmail = req.body.emailId;
    console.log('userEmail', userEmail);
    try{
         const users = await User.find({emailId: userEmail});
         if(users.length === 0){
             res.status(404).send('User not found!!!');
        } else {
             res.send(users);
         }
    } catch(err) {
        res.status(400).send('Request Failed!!!' + err.message);
    }
})

// get all the users;
app.get('/feed', async (req, res) => {
    try {
        const users = await User.find({});
        if(user) {
            res.send(users);
        } else {
            res.status(404).send('User not found!!');
        }
    } catch {
        res.status(401).send('Something went wrong!!!');
    }
})

//findOne()
app.get("/oneuser", async (req, res) => {
    const userEmailId = req.body.emailId;
    try {
        const user = await User.findOne({emailId: userEmailId});
        if(user) {
            res.send(user); 
        } else {
            res.status(404).send('User not found!!');
        }
    } catch(err) {
        res.status(401).send('Something went wrong!!!');
    }
})

//findById()
app.get('/userById', async (req, res) => {
    const userId = req.body.id;
    try{
        const user = await User.findById(userId);
        if(user) {
            res.send(user);
        } else {
            res.status(404).send('User not found!!');
        }
    } catch(err) {
        res.status(401).send("Something went wrong!!!");
    }
})

//Update user
//here if you pass {returnDocument: "after"} as a 3rd orgument then it will retun updated data
// And if you pass {returnDocument: "before"} as a 3rd orgument then it will retun old data
app.patch('/user', async (req, res) => {
    const userData = req.body;
    
    console.log('user Data', userData);
    try {
        const userExists = await User.exists({_id: userData._id});
        console.log('userExists', userExists);
        if(userExists) {
            const updatedUser = await User.findByIdAndUpdate(userData._id, userData, {returnDocument: "after"});
            res.send(updatedUser);
        } else {
            res.status(404).send('User not Deleted.');
        }
    } catch(err) {
        res.status(401).send('Request failed!!');
    }
})

//Delete user
app.delete("/user", async (req, res) => {
    const userId = req.body.id;
    try{
        const isUserExist = await User.exists({_id: userId});
        if(isUserExist) {
            await User.findByIdAndDelete(userId);
            res.send('User Deleted successfully.');
        } else {
            res.status(401).send('User not found.');
        }
    } catch(err) {
        res.status(400).send("Request Failed!!!");
    }
})

//Update data using EmailId
app.patch('/userbyEmail', async (req, res) => {
    const userData = req.body;
    try {
        const updatedUser = await User.findOneAndUpdate({emailId: userData.emailId}, userData, {returnDocument: 'after'});
        res.send(updatedUser);
    } catch(err) {
        res.status(400).send("Request failed!!!");
    }
})
______________________________________________________________________________

validator npm is very usefull for apply validaton

const mongoose = require('mongoose');
// const { Schema } = mongoose;
const validator = require('validator');

const userSchema = new mongoose.Schema({
  firstName: {
    type:String,
    required: true,
    minLength: 4,
    maxLength: 50
  },
  lastName: {
    type:String,
  },
  emailId: {
    type:String,
    required: true,
    unique: true,
    lowercase: true,
    trim: true,
    validate(value) {
      if(!validator.isEmail(value)) {
        throw new Error('Email Id is not valid');
    }
    }
  },
  password: {
    type:String,
    required: true,
    validate(value) {
      if(!validator.isStrongPassword(value)) {
        throw new Error("Please add strong password");
      }
    }
  },
  age:{
    type:Number,
    min: 18
  },
  gender: {
    type:String,
    validate(value) {
      if(!["male", "female", "other"].includes(value)) {
        throw new Error("Gender data is not valid");
      }
    }
  },
  about: {
    type: String,
    default: "this is default about of the User!!!"
  },
  photoUrl: {
    type: String,
    default: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTseF8KZL2hHobMM6IsjiHUXSMWntcK9Fk4KA&s",
    validate(value) {
      if(!validator.isURL(value)) {
        throw new Error("Not a Valid Photo url");
      }
    }
  },
  skills: {
    type: [String]
  }
},
{
   timestamps: true
}
);

module.exports = mongoose.model('User', userSchema);

______________________________________________________________________________

Add JWT token handle in namastenode
- Install cookie to parse
- install jsonwebtoken
- npm i cookie-parser
- npm i jsonwebtoken

Middleware code

const jwt = require('jsonwebtoken');
const User = require('../models/user');

const jwtAuth = async (req, res, next) => {
    try {
        const cookies = req.cookies;
            const { token } = cookies;
            if(!token) {
                throw new Error('Token not found');
            }
        const decodedJWT = await jwt.verify(token, 'Dev@Tinder@2025');
        const {_id} = decodedJWT;
        const user = await User.findById(_id);
        if(!user) {
            throw new Error('Unauthorized User')
        } else {
            req.user = user;
            next();
        }
        } catch(err) {
            res.status(400).send("ERROR :" + err.message);
        }
}

module.exports = {
    jwtAuth
};


aap.js code
const cookieParser = require("cookie-parser");
const jwt = require('jsonwebtoken');

app.get("/profile", jwtAuth, async (req, res) => {
    try {
        const user = req.user; // user is set the middleware
        if(user) {
            res.send(user);
        } else {
            throw new Error('User not found.')
        }
    } catch(err) {
        res.status(400).send("ERROR : " + err.message);
    }
})

______________________________________________________________________________

Add roter in project 

Create Router folder and add auth.js / profile.js

router/auth.js

const express = require('express');
 const authRouter = express.Router();
 const User = require('../models/user');
 const bcrypt = require("bcrypt");
 const jwt = require('jsonwebtoken');
 const validator = require("validator");
const { validatedSignupData } = require('../utils/validtion');


authRouter.post("/signup", async (req, res) => {
    
    try{
        validatedSignupData(req);
        const { firstName, 
            lastName, 
            gender, 
            age, 
            emailId,
            about,
            photoUrl,
            password} = req.body;
        const passwordHash = await bcrypt.hash(password, 10);

        const user = new User({
            firstName, 
            lastName, 
            gender, 
            age, 
            emailId,
            about,
            photoUrl,
            password: passwordHash
        });
        await user.save(user);
        res.send("User Added Successfully!!");
   } catch(err) {
        res.status(400).send('ERROR : '+ err.message);
   }
})


authRouter.post('/login', async (req, res) => {
    try{
        const {emailId, password} = req.body;
        console.log('emailId, password', emailId, password);
        if(!validator.isEmail(emailId)) {
            throw new Error("Invalid Credentials");
        }

        const user = await User.findOne({emailId: emailId});

        if(!user) {
            throw new Error('User is not present in the Database');
        }

        const isPasswordValid = await bcrypt.compare(password, user.password);
        if(!isPasswordValid) {
            throw new Error('Invalid Credentials')
        } else {
            const token = await jwt.sign({ _id: user._id }, 'Dev@Tinder@2025', {expiresIn: "1d"});
            res.cookie("token", token);
            // res.send({message:'User login Successfully', toke: token});
            res.send('User login Successfully');

        }

    } catch(err) {
        res.status(401).send('ERROR :' + err.message);
    }
})



module.exports = authRouter;

______________________________________________________________________________

app.js

const authRouter = require("./routes/auth");
const profileRouter = require("./routes/profile");

app.use('/', authRouter);
app.use('/', profileRouter);
______________________________________________________________________________

